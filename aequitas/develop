#!/usr/bin/env bash
#
# install-cli
#
# Copy this file into your project to enable easy, guided
# installation/bootstrapping.
#
# Don't like sh/bash/etc? Sure.
#
# Love sh/bash/etc? Yeah, but....
#
# Let's use it here, to bootstrap whatever tools/libraries/etc. we
# *really* love for our project.
#
# You can name your implementation of this script whatever you like,
# such as: install
#

# Update INSTALL_VERSION to require the version of install-cli this
# script expects
INSTALL_VERSION=0.0.4

#
# start bootstrap installation lib
#
# This is a *bit* of boilerplate to ensure we've downloaded the correct
# version of install-cli. (You probably don't need to touch this.)
#

INSTALL_FILE=.install.${INSTALL_VERSION//./-}.bash.inc

INSTALL_URL=https://raw.githubusercontent.com/dssg/install-cli/$INSTALL_VERSION/install.bash.inc

[ -f $INSTALL_FILE ] || curl -#L $INSTALL_URL -o $INSTALL_FILE

. $INSTALL_FILE

#
# end bootstrap installation lib
#

#
# start project check/install
#
# This is your time to shine!
# Invoke 'require' to ensure your project's basic requirements are met.
#

# direnv

exists_direnv() {
  icli::check_command direnv
}

apt_install_direnv() {
  sudo apt install direnv
}

yum_install_direnv() {
  sudo yum install direnv
}

brew_install_direnv() {
  brew install direnv
}

install_direnv=""
case $(uname -s) in
Linux)
  [ -f /etc/os-release ] && . /etc/os-release
  case ${ID_LIKE:-$ID} in
  *debian*)
    install_direnv=apt_install_direnv
    ;;
  *fedora*|*rhel*)
    install_direnv=yum_install_direnv
    ;;
  esac
  ;;
Darwin)
  install_direnv=brew_install_direnv
  ;;
esac

require direnv \
  exists_direnv \
  $install_direnv \
  --fail-prefix="not found"

icli::set_context direnv
if ! exists_direnv && [ -z $install_direnv ]
then
  icli::message "${T_FRED}error: could not determine how to install direnv on your system"
elif [ ! -e .envrc ]
then
  cp .envrc.example .envrc
  icli::message "${T_FYELLOW}customize .envrc with your credentials"
fi
icli::unset_context

# pyenv

exists_pyenv() {
  icli::check_command pyenv
}

install_pyenv() {
  curl -#L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
}

require pyenv \
  exists_pyenv \
  install_pyenv \
  --fail-prefix="not found"

# python

PY_VERSION=3.6.6

exists_python() {
  pyenv versions 2> /dev/null | grep -E "^ *${PY_VERSION}$" > /dev/null
}

install_python() {
  pyenv install -s $PY_VERSION
}

require "python-${PY_VERSION}" \
  exists_python \
  install_python \
  --fail-prefix="v${PY_VERSION} not found"

# virtualenv

PROJECT=$(<.python-version)

exists_virtualenv() {
  test "$(pyenv version-name 2> /dev/null)" == "$PROJECT"
}

install_virtualenv() {
  pyenv virtualenv $PY_VERSION $PROJECT
}

require "env-${PROJECT}" \
  exists_virtualenv \
  install_virtualenv \
  --fail-prefix="project virtual environment not found"

# python libs

py_version=$(python - <<<"
import sys
print(*sys.version_info[:3], sep='.')
")

py_version_error() {
  # when something went really wrong
  icli::set_context $1
  icli::message "${T_FRED}unexpected python version – will not install ✗"
  icli::unset_context
}

install_lib() {
  python -m pip install -e . && \
  python -m pip install -Ur requirement/dev.txt
}

if [[ $py_version == $PY_VERSION ]]; then
  # no great way to check that python libs installed;
  # rather, always fail check and let pip figure it out
  require lib \
    icli::always_install \
    install_lib
else
  echo
  py_version_error lib
fi

# management environment

install_management() {
  python -m venv --clear --prompt=manage .manage && \
  .manage/bin/pip install -r requirement/management.txt
}

if [[ $py_version == $PY_VERSION ]]; then
  require manage \
    icli::always_install \
    install_management
else
  echo
  py_version_error manage
fi

# environment variables

EXPECTED_ENVVARS=AWS_EB_PROFILE

check_envvars() {
  icli::check_envvars $EXPECTED_ENVVARS
}

require envvars \
  check_envvars \
  --fail-prefix="one or more of these environment variables missing ($EXPECTED_ENVVARS)"

# end project check/install
