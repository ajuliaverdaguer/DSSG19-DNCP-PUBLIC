user_metadata:
    label_definition:
    team:
    author: 'wen'

cohort_config:
    name: 'test_cohort'
    tender_type:
    query: |
         select distinct id_llamado from semantic.tenders
             where tipo_procedimiento_codigo = 'CD'
             or tipo_procedimiento_codigo = 'CO'
             or tipo_procedimiento_codigo = 'LPN'
             or tipo_procedimiento_codigo = 'CE'
             or tipo_procedimiento_codigo = 'LC'
             or tipo_procedimiento_codigo = 'LPI'

label_config:
    name: 'effective_complaint'
    query : 'bool_of_effective_complaints'

features:
    -
        table: 'semantic.tenders'
        columns:
          - log_amt_planned_real_guarani
          - tipo_procedimiento_codigo
          - tipo_entidad
          - _objeto_licitacion
          - reception_month
          - reception_day


validation:
    method: 'temporal-folding'
    parameters:
        as_of_date: '2013-01-01'
        train_lag: 'all'
        test_lag: 365
        aod_lag: 182
        blind_gap: 90
        number_of_folds: null
        test_date_limit: '2019-01-31'

evaluation:
    metrics: [recall, precision, f1, missed, size]
    parameters:
        at%: [1, 5, 10, 15, 20, 30, 40, 50, 70, 90, 100]
        lower_bound: 1
        upper_bound: 200
        precision_at: [0.7, 0.75, 0.8, 0.85, 0.9, 0.95]
    groups:
        CD: director1
        CO: director2
        LPN: director3
        LPI: director3
        LC: director3
        CE: director3

model_config:
    random_seed: 22
    max_seconds: 300 # 5 minutes max runtime
    errors: false


approaches:
    -
      approach_name: 'random'
      file_path: 'random_approach.py'
      preprocessors: []
      hyperparameters:
        random:
          params:
            sorting:
              -
                column_name: log_amt_planned_real_guarani
                higher: true
    -
      approach_name: 'higher_than_x'
      file_path: 'heuristic_approach.py'
      preprocessors: []
      hyperparameters:
        heuristic:
          params:
            sorting:
              -
                column_name: log_amt_planned_real_guarani
                higher: true
    -
        approach_name: 'decision_tree'
        file_path: 'generic_approach.py'
        preprocessors: ['StandardScaler', 'OneHotEncoder']
        hyperparameters:
          criterion:
          - gini
          - entropy
          max_depth:
          - 1
          - 5
          - 10
          - 50
          max_features:
          - null
          min_samples_split:
          - 2
          - 5
          - 10
    -
        approach_name: 'extra_trees'
        file_path: 'generic_approach.py'
        preprocessors: ['StandardScaler', 'OneHotEncoder']
        hyperparameters:
          criterion:
          - gini
          - entropy
          max_depth:
          - 1
          - 5
          - 10
          max_features:
          - sqrt
          - log2
          min_samples_split:
          - 2
          - 5
          n_estimators:
          - 1
          - 10
          - 100
          n_jobs:
          - 5
    # -
    #     approach_name: 'gradient_boosting'
    #     file_path: 'generic_approach.py'
    #     preprocessors: ['StandardScaler', 'OneHotEncoder']
    #     hyperparameters:
    #       learning_rate:
    #       - 0.001
    #       - 0.01
    #       - 0.05
    #       - 0.1
    #       - 0.5
    #       max_depth:
    #       - 1
    #       - 3
    #       - 5
    #       - 20
    #       n_estimators:
    #       - 1
    #       - 10
    #       - 500
    #       subsample:
    #       - 0.1
    #       - 0.5
    #       - 1.0

    -
        approach_name: 'knn'
        file_path: 'generic_approach.py'
        preprocessors: ['StandardScaler', 'OneHotEncoder']
        hyperparameters:
          algorithm:
          - auto
          - ball_tree
          - kd_tree
          n_neighbors:
          - 1
          - 5
          - 10
          - 50
          weights:
          - uniform
          - distance
    -
        approach_name: 'logistic_regression'
        file_path: 'generic_approach.py'
        preprocessors: ['StandardScaler', 'OneHotEncoder']
        hyperparameters:
          C:
          - 1.0e-05
          - 0.0001
          - 0.001
          - 1
          - 10
          penalty:
          - l1
          - l2
    -
        approach_name: 'random_forest'
        file_path: 'generic_approach.py'
        preprocessors: ['StandardScaler', 'OneHotEncoder']
        hyperparameters:
          max_depth:
          - 1
          - 5
          - 10
          max_features:
          - sqrt
          - log2
          min_samples_split:
          - 2
          - 5
          - 10
          n_estimators:
          - 1
          - 10
          - 100
          n_jobs:
          - 5
    -
        approach_name: 'lgbm'
        file_path: 'generic_approach.py'
        preprocessors: ['StandardScaler', 'OneHotEncoder']
        hyperparameters:
          max_depth:
            - 5
            - 10
            - 50
          boosting_type:
            - 'gbdt'
            - 'dart'
            - 'goss'
            - 'rf'
          min_child_weight:
            - 1.0e-5
            - 1.0e-2
            - 1
            - 1.0e2
          verbose:
            - -1
    